// Pixel Shader for Point Lighting.

float3 g_f3Light;	// Light world position.

sampler textureDiffuse : register(s3) = sampler_state
{
	MipFilter = LINEAR;
    MinFilter = ANISOTROPIC;
    MagFilter = LINEAR;
    AddressU = WRAP;
    AddressV = WRAP;
    MaxAnisotropy = 16;
};

sampler textureSpecular : register(s1) = sampler_state
{
	MipFilter = LINEAR;
    MinFilter = ANISOTROPIC;
    MagFilter = LINEAR;
    AddressU = WRAP;
    AddressV = WRAP;
    MaxAnisotropy = 16;
};

sampler textureNormal : register(s2) = sampler_state
{
	MipFilter = LINEAR;
    MinFilter = ANISOTROPIC;
    MagFilter = LINEAR;
    AddressU = WRAP;
    AddressV = WRAP;
    MaxAnisotropy = 16;
};

struct PS_INPUT
{
	float2 f2UV : TEXCOORD0;	// UV
	float4 f4PixelPos : TEXCOORD1;	// Pixel position
	float3 f3Normal : TEXCOORD2;	// Normal
};

float4	main(const PS_INPUT pIn) : COLOR
{
	float4 f4ColorDiffuse = tex2D(textureDiffuse, pIn.f2UV);
	float4 f4ColorSpecular = tex2D(textureSpecular, pIn.f2UV);

 	float3 f3LightDir = g_f3Light - pIn.f4PixelPos.xyz;								// Light vector eye-pixel world position
 	float fAtenuation = clamp(1.0f - (length(f3LightDir) / 675.0f), 0.0f, 1.0f);	// 675 units of radius
	
 	float fDot = dot(normalize(f3LightDir), normalize(pIn.f3Normal)) * fAtenuation;	// Dot product with the polygon's normal.
 	
 	float fDotSpecular = dot(normalize(f3LightDir * 0.5), normalize(pIn.f3Normal)) * fAtenuation;	// Dot product half light vector with the polygon's normal.
 	float fShininess = pow(max (dot (normalize(f3LightDir * 0.5), normalize(pIn.f3Normal)), 0.0), 2.0)  ;
 	
 	float4 f4ColorDiffuseFinal = f4ColorDiffuse * fDot;
 	float4 f4ColorSpecularFinal = f4ColorSpecular * fDotSpecular * fShininess;
	
	float4 f4Color = f4ColorDiffuseFinal + f4ColorSpecularFinal;
	
	return f4Color;
}